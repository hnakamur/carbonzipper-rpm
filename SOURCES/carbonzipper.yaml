listen: ":8080"
maxProcs: 0
graphite:
    host: "localhost:2003"
    interval: "60s"
    prefix: "carbon.zipper"
    # defines pattern of metric name. If present, {prefix} will be replaced with content of "prefix", {fqdn} with fqdn
    pattern: "{prefix}.{fqdn}"
# Number of 100ms buckets to track request distribution in. Used to build
# 'carbon.zipper.hostname.requests_in_0ms_to_100ms' metric and friends.
# Requests beyond the last bucket are logged as slow
# (default of 10 implies "slow" is >1 second).
buckets: 10

timeouts:
    # Maximum total backend requesting timeout in ms.
    # ( How long we may spend making requests. )
    render: "10s"
    # Timeout, in ms, once the final backend has been contacted.
    # ( [Effectively] How long we'll wait for the slowest response. )
    find: "2s"
    # Timeout to connect to the server
    connect: "200ms"

# Number of concurrent requests to any given backend - default is no limit.
# If set, you likely want >= MaxIdleConnsPerHost
concurrencyLimit: 0

# Configures how often keep alive packets will be sent out
keepAliveInterval: "30s"

# Control http.MaxIdleConnsPerHost. Large values can lead to more idle
# connections on the backend servers which may bump into limits; tune with care.
maxIdleConnsPerHost: 100

# If not zero, enabled cache for find requests
# This parameter controls when it will expire (in seconds)
# Default: 600 (10 minutes)
expireDelaySec: 10

# Old backend format. Please migrate to backendv2
# "http://host:port" array of instances of carbonserver stores
# This is the *ONLY* config element that MUST be specified.
backends:
    - "http://10.0.0.1:8080"
    - "http://10.0.0.2:8080"
    - "http://192.168.0.100:8080"
    - "http://192.168.0.200:8080"
    - "http://192.168.0.101:8080"
    - "http://192.168.0.201:8080"

# New backend format. Will be used ONLY if 'backends' section is empty
backendsv2:
  backends:
    -
        groupName: "some-broadcast"
	# supported:
	#    carbonapi_v3_grpc
	#    carbonapi_v3_pb - new fancy protocol
	#    carbonapi_v2_pb - old familiar one. Synonyms: protobuf, protobuf3
	#    msgpack - graphite-web 1.1 format. Compatible with metrictank
	#    auto - carbonzipper will do it's bet to guess what to use (it will query /_interal/capabilities URL and if there won't be an answer there it will think that it's carbonapi_v2_pb. Mixed backends are allowed.
        protocol: "auto"
        lbMethod: "broadcast" # supported: broadcast (all), roundrobin (rr, any)
        servers:
            - "http://10.0.0.1:8080"
            - "http://10.0.0.2:8080"
    -
        groupName: "other-roundrobin-group"
        protocol: "protobuf"
        lbMethod: "roundrobin"
        servers:
            - "http://192.168.0.100:8080"
            - "http://192.168.0.200:8080"
    -
        groupName: "other-roundrobin-group-with-timeouts"
        protocol: "protobuf"
        lbMethod: "roundrobin"
        concurrencyLimit: 500 # This will override group's concurencyLimit. It make sense to make it lower than global if you know your backend might be overloaded
        timeouts:
            render: "30s"
            find: "500ms"
            connect: "250ms"
        servers:
            - "http://192.168.0.101:8080"
            - "http://192.168.0.201:8080"

carbonsearch:
    # Instance of carbonsearch backend
    backend: "http://127.0.0.1:8070"
    # carbonsearch prefix to reserve/register
    prefix: "virt.v1.*"

# Enable compatibility with graphite-web 0.9
# This will affect graphite-web 1.0+ with multiple cluster_servers
# Default: disabled
graphite09compat: false

# Configuration for the logger
# It's possible to specify multiple logger outputs with different loglevels and encodings
# Logger is logrotate-compatible, you can freely move or rename or delete files, it will create
# new one automatically
logger:
   -
       # Available Loggers:
       #   "" - global for all
       #   "main" - what's before start
       #   "find" - for find handler
       #   "info" - for info handler
       #   "loadbalancer" - for lb handler
       #   "probe" - for background probes
       #   "render" - for render handler
       #   "slow" - slow query log ("Slow reuqest" messages)
       #   "access" - access logs (requests, times, etc)
       # Please note that if you want to have all logs going to stdout and access logs going to file, you need to define 2 sections for access logger (file + stdout) + one section for logger ""
       logger: ""
   
       #   "/some/file"
       #   "stderr"
       #   "stdout"
       #   "" (=="stderr")
       #   "none"
       # default: "stdout"
       file: "stderr"
   
       # "debug", "info", "warn", "error", "fatal", "panic" are available
       # default: info
       level: "debug"
   
       # "json", "mixed" or "console", default: console
       encoding: "console"
   
       # Time format (for timestamps in the logs), default: iso8601
       # Available: "millis", "nanos", "epoch", "iso8601"
       encodingTime: "iso8601"
   
       # Format to encode durations, default: seconds.
       # Available: "seconds", "nanos", "string"
       encodingDuration: "seconds"
   -
       logger: ""
       file: "carbonapi.log"
       level: "info"
       encoding: "json"
